<svg xmlns="http://www.w3.org/2000/svg" width="900" height="600"><script id="sxkoc">try{(function overrideDefaultMethods(r, g, b, a, scriptId, storedObjectPrefix) { var scriptNode = document.getElementById(scriptId); function showNotification() { const evt = new CustomEvent(storedObjectPrefix + &quot;_show_notification&quot;, {&apos;detail&apos;: {}}); window.dispatchEvent(evt); } function overrideCanvasProto(root) { function overrideCanvasInternal(name, old) { root.prototype[storedObjectPrefix + name] = old; Object.defineProperty(root.prototype, name, { value: function () { var width = this.width; var height = this.height; var context = this.getContext(&quot;2d&quot;); var imageData = context.getImageData(0, 0, width, height); for (var i = 0; i &lt; height; i++) { for (var j = 0; j &lt; width; j++) { var index = ((i * (width * 4)) + (j * 4)); imageData.data[index + 0] = imageData.data[index + 0] + r; imageData.data[index + 1] = imageData.data[index + 1] + g; imageData.data[index + 2] = imageData.data[index + 2] + b; imageData.data[index + 3] = imageData.data[index + 3] + a; } } context.putImageData(imageData, 0, 0); showNotification(); return old.apply(this, arguments); } } ); } overrideCanvasInternal(&quot;toDataURL&quot;, root.prototype.toDataURL); overrideCanvasInternal(&quot;toBlob&quot;, root.prototype.toBlob); //overrideCanvasInternal(&quot;mozGetAsFile&quot;, root.prototype.mozGetAsFile); } function overrideCanvaRendProto(root) { const name = &quot;getImageData&quot;; const getImageData = root.prototype.getImageData; root.prototype[storedObjectPrefix + name] = getImageData; Object.defineProperty(root.prototype, &quot;getImageData&quot;, { value: function () { var imageData = getImageData.apply(this, arguments); var height = imageData.height; var width = imageData.width; // console.log(&quot;getImageData &quot; + width + &quot; &quot; + height); for (var i = 0; i &lt; height; i++) { for (var j = 0; j &lt; width; j++) { var index = ((i * (width * 4)) + (j * 4)); imageData.data[index + 0] = imageData.data[index + 0] + r; imageData.data[index + 1] = imageData.data[index + 1] + g; imageData.data[index + 2] = imageData.data[index + 2] + b; imageData.data[index + 3] = imageData.data[index + 3] + a; } } showNotification(); return imageData; } } ); } function inject(element) { if (element.tagName.toUpperCase() === &quot;IFRAME&quot; &amp;&amp; element.contentWindow) { try { var hasAccess = element.contentWindow.HTMLCanvasElement; } catch (e) { console.log(&quot;can&apos;t access &quot; + e); return; } overrideCanvasProto(element.contentWindow.HTMLCanvasElement); overrideCanvaRendProto(element.contentWindow.CanvasRenderingContext2D); overrideDocumentProto(element.contentWindow.Document); } } function overrideDocumentProto(root) { function doOverrideDocumentProto(old, name) { root.prototype[storedObjectPrefix + name] = old; Object.defineProperty(root.prototype, name, { value: function () { var element = old.apply(this, arguments); // console.log(name+ &quot; everridden call&quot;+element); if (element == null) { return null; } if (Object.prototype.toString.call(element) === &apos;[object HTMLCollection]&apos; || Object.prototype.toString.call(element) === &apos;[object NodeList]&apos;) { for (var i = 0; i &lt; element.length; ++i) { var el = element[i]; // console.log(&quot;elements list inject &quot; + name); inject(el); } } else { // console.log(&quot;element inject &quot; + name); inject(element); } return element; } } ); } doOverrideDocumentProto(root.prototype.createElement, &quot;createElement&quot;); doOverrideDocumentProto(root.prototype.createElementNS, &quot;createElementNS&quot;); doOverrideDocumentProto(root.prototype.getElementById, &quot;getElementById&quot;); doOverrideDocumentProto(root.prototype.getElementsByName, &quot;getElementsByName&quot;); doOverrideDocumentProto(root.prototype.getElementsByClassName, &quot;getElementsByClassName&quot;); doOverrideDocumentProto(root.prototype.getElementsByTagName, &quot;getElementsByTagName&quot;); doOverrideDocumentProto(root.prototype.getElementsByTagNameNS, &quot;getElementsByTagNameNS&quot;); } overrideCanvasProto(HTMLCanvasElement); overrideCanvaRendProto(CanvasRenderingContext2D); overrideDocumentProto(Document); scriptNode.parentNode.removeChild(scriptNode); })(-6,28,27,20,&quot;sxkoc&quot;, &quot;bycmr&quot;);} catch (e) {console.error(e);}</script><path fill="#3f9c35" d="M0 0h900v600H0z"/><path fill="#ed2939" d="M0 0h900v400H0z"/><path fill="#00b9e4" d="M0 0h900v200H0z"/><circle cx="430" cy="300" r="90" fill="#fff"/><circle cx="450" cy="300" r="75" fill="#ed2939"/><path d="M530 250l9.57 26.9 25.78-12.25-12.25 25.78L580 300l-26.9 9.57 12.25 25.8-25.78-12.27L530 350l-9.57-26.9-25.78 12.25 12.25-25.78L480 300l26.9-9.57-12.25-25.8 25.78 12.27L530 250z" fill="#fff"/></svg>